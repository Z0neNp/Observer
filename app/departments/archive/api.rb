# frozen_string_literal: true

require 'singleton'
require_relative './services/icmp_flood_report.rb'

module Departments
  module Archive
    ##
    # API that is consumed by other modules.
    # It is used for operating models, i.e. {FriendlyResource}.
    class Api
      include Singleton

      # @param [Integer] page First page starts at 1.
      # @param [Integer] page_size
      # @return [Array<FriendlyResource>]
      def all_friendly_resources(page, page_size)
        FriendlyResource.paginate(page: page, per_page: page_size)
      end

      # @param [CyberReport] cyber_report
      # @return [FriendlyResource]
      def friendly_resource_by_cyber_report(cyber_report)
        cyber_report.friendly_resource
      end

      # @param [Integer] id {FriendlyResource} id, generated by db at its first persistance.
      # @return [FriendlyResource]
      def friendly_resource_by_id(id)
        FriendlyResource.find(id)
      end

      # @param [Integer] ip {FriendlyResource} ip address.
      # @return [FriendlyResource]
      def friendly_resource_by_ip(ip)
        FriendlyResource.find_by(ip_address: ip)
      end

      # Initiates a new object. It is not persisted inside database yet.
      # @param [String] name {FriendlyResource} name.
      # @param [Integer] ip {FriendlyResource} ip address.
      # @return [FriendlyResource]
      def new_friendly_resource(name, ip)
        FriendlyResource.new(name: name, ip_address: ip)
      end

      # Will persist the object in database.
      # @param [FriendlyResource] friendly_resource {FriendlyResource}.
      # @return [Void]
      def persist_friendly_resource(friendly_resource)
        friendly_resource.save
      end

      # Retrieves in DESC order, according to creation date.
      # @param [Integer] ip Integer representation of {FriendlyResource} ip address.
      # @param [Symbol] type {CyberReport} type, i.e. {Shared::AnalysisType::ICMP_DOS_CYBER_REPORT}.
      # @param [Integer] page Starts at 1.
      # @param [Integer] page_size
      # @return [Array<CyberReport>]
      def cyber_reports_by_friendly_resource_ip_and_type(ip, type, page, page_size)
        result = []
        friendly_resource = friendly_resource_by_ip(ip)
        if friendly_resource
          case type
          when Shared::AnalysisType::ICMP_DOS_CYBER_REPORT
            result = Services::IcmpFloodReport.instance.latest_reports_by_friendly_resource_id(
              friendly_resource.id,
              page,
              page_size
            )
          end
        end
        result
      end

      # @param [Integer] id {CyberReport} id, generated by db.
      # @param [Symbol] type {CyberReport} type, i.e. {Shared::AnalysisType::ICMP_DOS_CYBER_REPORT}.
      # @return [CyberReport]
      def cyber_report_by_id_and_type(id, type)
        cyber_report = nil
        case type
        when Shared::AnalysisType::ICMP_DOS_CYBER_REPORT
          cyber_report = Services::IcmpFloodReport.instance.icmp_flood_report_by_id(id)
        end
        cyber_report
      end

      # @param [Integer] ip Numeric representation of {FriendlyResource} ip address.
      # @param [Symbol] type {CyberReport} type, i.e. {Shared::AnalysisType::ICMP_DOS_CYBER_REPORT}.
      # @param [Hash] opts Additional custom attributes:
      #   * :seasonal_index [Symbol] a mandatory attribute for {Dos::IcmpFloodReport}.
      # @return {CyberReport}
      def cyber_report_by_friendly_resource_ip_and_type_and_custom_attr(ip, type, opts)
        friendly_resource = friendly_resource_by_ip(ip)
        if friendly_resource
          result = nil
          case type
          when Shared::AnalysisType::ICMP_DOS_CYBER_REPORT
            result = Services::IcmpFloodReport.instance.latest_report_by_friendly_resource_id_and_seasonal_index(
              friendly_resource.id,
              opts[:seasonal_index]
            )
          end
          return result
        end
        throw Exception.new("#{self.class.name} - #{__method__} - no friendly resource\
          for ip : #{ip}.")
      end

      # Initiates new object of one of {CyberReport} sub-classes, i.e. {Dos::IcmpFloodReport}.
      # @param [Integer] ip Numeric representation of {FriendlyResource} ip address.
      # @param [AnalysisType] type CyberReport type, i.e. {Shared::AnalysisType::ICMP_DOS_CYBER_REPORT}.
      # @param [Hash] opts Additional custom attributes :
      #   * :seasonal_index [Symbol] a mandatory attribute for {Dos::IcmpFloodReport}.
      # @return {CyberReport}
      def new_cyber_report_object_for_friendly_resource(ip, type, opts)
        friendly_resource = friendly_resource_by_ip(ip)
        if friendly_resource
          result = nil
          case type
          when Departments::Shared::AnalysisType::ICMP_DOS_CYBER_REPORT
            icmp_interp_data_service = Services::IcmpFloodReport.instance
            result = icmp_interp_data_service.new_report_object(
              opts[:seasonal_index]
            )
            friendly_resource.icmp_flood_report << result if result
            return result
          end
        end
        throw Exception.new("#{self.class.name} - #{__method__} - no friendly resource\
          for ip : #{ip}.")
      end

      def persist_cyber_report(report)
        report.save
      end
    end
  end
end
